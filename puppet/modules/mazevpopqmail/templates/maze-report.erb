#
# maze vpopqmail report script - mazevpopqmail/templates/maze-report.erb
#
#
# this file was generated by puppet
# do not overwrite this file, or puppet will overwrite it again...
# so only customize this file in puppet itself
#
###############################################################################

MESSAGE_USAGE="maze vpopqmail report"
VPOPMAIL_POST=""

CATCHALL_DIRECTIVE_DELETE='delete'
CATCHALL_DIRECTIVE_BOUNCE='bounce-no-mailbox'
NODE_REPORTS="/etc/maze/.report"

isEmail() {
    if ! [[ "$1" =~ [A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4} ]]; then
        return 1
    fi

    return 0
}

getDomains() {
    DOMAINS=`$VPOPMAIL_BIN/vdominfo -n | sed ':a;N;$!ba;s/\n\n/\n/g'`

    # vpopmail return when no domain existent and if return when vpopmail is not yet initialized
    if [ "$DOMAINS" == "What now - Success" ]; then 
        DOMAINS=""
    elif [ "$DOMAINS" == "Can't get domain entries - can't read users/assign file" ]; then 
        DOMAINS=""
    fi
}

getAccounts() {
    if [ -z "$DOMAIN" ]; then
        ACCOUNTS=''
        return
    fi

    # ingores automated postmaster accounts + adds domain for complete email adddress
    ACCOUNTS=`$VPOPMAIL_BIN/vuserinfo -n -D $DOMAIN | sed "s/$/\@$DOMAIN/" | sed "/postmaster\@$DOMAIN/d"`
}

getForwarders() {
    if [ -z "$DOMAIN" ]; then
        FORWARDERS=''
        return
    fi

    # get ONLY forwarders
    FORWARDERS=`$VPOPMAIL_BIN/valias "$DOMAIN"`

    NONFORWARDERS=`echo "$FORWARDERS" | grep  -i '/bin/ezmlm\|/bin/autorespond\|/Mailbox' | awk '{print $1}' | uniq`
    for NONFORWARDER in $NONFORWARDERS
    do
        if [ "$NONFORWARDERS_GREP" ]; then
            NONFORWARDERS_GREP="${NONFORWARDERS_GREP}\|"
        fi

        NONFORWARDERS_GREP="${NONFORWARDERS_GREP}^${NONFORWARDER}"
    done

    if [ "$NONFORWARDERS_GREP" ]; then
        FORWARDERS=`echo "$FORWARDERS" | grep  -i -v "${NONFORWARDERS_GREP}"`
    fi

    FORWARDERS=`echo "$FORWARDERS" | awk '{print $1}' | uniq`
}

getMailingLists() {
    if [ -z "$DOMAIN" ]; then
        MAILING_LISTS=''
        return
    fi

    # get ONLY mailing lists
    MAILING_LISTS=`$VPOPMAIL_BIN/valias "$DOMAIN" | grep -i '/bin/ezmlm/ezmlm-send' | awk '{print $1}' | uniq`
}

getRobots() {
    if [ -z "$DOMAIN" ]; then
        ROBOTS=''
        return
    fi

    # get ONLY robots
    ROBOTS=`$VPOPMAIL_BIN/valias "$DOMAIN" | grep -i '/bin/autorespond' | awk '{print $1}' | uniq`
}

buildDomainAccountDetails() {
    ACCOUNT="$1"

    if [ -z "$ACCOUNT" -o -z "$ACCOUNT_MD5" -o -z "$DOMAIN_MD5" ]; then
        return
    fi

    # account properties
    QUOTA=`$VPOPMAIL_BIN/vuserinfo -q "$ACCOUNT"`
    USED_QUOTA=`$VPOPMAIL_BIN/vuserinfo -Q "$ACCOUNT"`
    PASSWORD=`$VPOPMAIL_BIN/vuserinfo -p "$ACCOUNT"`

    # quota in mb
    if [  "$QUOTA" != "NOQUOTA"  ]; then
        QUOTA_BYTE=`echo $QUOTA | sed 's/S//g'`
        QUOTA=\"`echo $(($QUOTA_BYTE / (1024*1024)))`\"
    else
        QUOTA='null'
    fi

    # set empty when NOQUOTA in USED_QUOTA
    if [  "$USED_QUOTA" == "NOQUOTA"  ]; then
        USED_QUOTA='null'
    else
        USED_QUOTA=\"$USED_QUOTA\"
    fi

    # check for disabled state from gid (flags=gid numerical value)
    FLAGS=`$VPOPMAIL_BIN/vuserinfo -g "$ACCOUNT"`
    if [ "$FLAGS" != 0 ]; then
        STATUS=false
    else
        STATUS=true
    fi

    VPOPMAIL_POST="${VPOPMAIL_POST}
                \"$ACCOUNT_MD5\":
                {
                    \"email\": \"$ACCOUNT\",
                    \"quota\": $QUOTA,
                    \"usedQuota\": $USED_QUOTA,
                    \"password\": \"$PASSWORD\",
                    \"status\": $STATUS
                },"
}

buildDomainForwarderDetails() {
    FORWARDER="$1"

    if [ -z "$DOMAIN" -o -z "$FORWARDER" -o -z "$DOMAIN_MD5" -o -z "$FORWARDER_MD5" ]; then
        return
    fi

    # only get forwarder targets
    FORWARD_TO=`$VPOPMAIL_BIN/valias "$FORWARDER" | awk '{print $3}'`

    # check for ONLY forwarder
    if [ `echo "$FORWARD_TO" | grep -i "/bin/ezmlm\|/bin/autorespond\|/Mailbox"` ]; then
        return 1
    fi

    VPOPMAIL_POST="${VPOPMAIL_POST}
                \"$FORWARDER_MD5\":
                {
                    \"email\": \"$FORWARDER\",
                    \"status\": true,
                    \"forwardTo\":
                    {"

    for TARGET in $FORWARD_TO
    do
        # strip & at start of forwarder
        if [ `echo "$TARGET" | grep "^&"` ]; then
            TARGET=`echo "$TARGET" | sed -e 's/^&//'`
        fi

        if ! isEmail $TARGET ; then
            if [ `echo "$TARGET" | grep Maildir` ]; then
                TARGET_DOMAIN=`echo "$TARGET" | awk -F / '{print $(NF -3)}'`
                TARGET_USER=`echo "$TARGET" | awk -F / '{print $(NF -2)}'`

                TARGET="${TARGET_USER}@${TARGET_DOMAIN}"
            fi

            if ! isEmail $TARGET ; then
                continue
            fi
        fi

        TARGET_MD5=`echo -n "$TARGET" | tr "[:upper:]" "[:lower:]" | md5sum | awk '{print $1}'`
        VPOPMAIL_POST="${VPOPMAIL_POST}
                        \"$TARGET_MD5\": \"$TARGET\","

    done

    VPOPMAIL_POST="${VPOPMAIL_POST:0:${#VPOPMAIL_POST} -1}
                    }
                },"
}

buildDomainRobotDetails() {
    ROBOT="$1"

    if [ -z "$ROBOT" -o -z "$DOMAIN" -o -z "$DOMAIN_MD5" -o -z "$ROBOT_MD5" ]; then
        return
    fi

    VPOPMAIL_POST="${VPOPMAIL_POST},
                    \"status\": true,"

    MESSAGE_FILE=`$VPOPMAIL_BIN/valias $ROBOT | grep '/bin/autorespond' | awk '{print $6}'`

    if [ ! -f "$MESSAGE_FILE" -o ! -r "$MESSAGE_FILE" ]; then
        MESSAGE="null"
    else
        # escape characters in bash for json
        MESSAGE=$(_escapeJSON "`cat $MESSAGE_FILE | sed ':a;N;$!ba;s/\n/\\\n/g'`")
        MESSAGE=`echo -e "$MESSAGE"`
    fi

    VPOPMAIL_POST="${VPOPMAIL_POST}
                    \"content\": \"$MESSAGE\","


    FORWARDTO=`$VPOPMAIL_BIN/valias $ROBOT | grep '> &' | awk '{print $3}' | sed 's/&//g'`
    if [ -n "$FORWARDTO" ]; then
        VPOPMAIL_POST="${VPOPMAIL_POST}
                    \"copyTo\": \"$FORWARDTO\","
    else
        VPOPMAIL_POST="${VPOPMAIL_POST}
                    \"copyTo\": null,"

    fi

    VPOPMAIL_POST="${VPOPMAIL_POST:0:${#VPOPMAIL_POST} -1}
                },"
}

buildDomainMailingListDetails() {
    LIST="$1"

    if [ -z "$DOMAIN" -o -z "$LIST" -o -z "$DOMAIN_MD5" -o -z "$LIST_MD5" ]; then
        return
    fi

    USER="$(echo "$LIST" | cut -d'@' -f1)"

    DOMAIN_DIR=`$VPOPMAIL_BIN/vdominfo -d $DOMAIN`
    LIST_DIR="$DOMAIN_DIR/$USER"

    if [ ! -d "$DOMAIN_DIR" -o ! -d "$LIST_DIR" ];then
        echo "Mailing list $LIST_DIR not found"
        return 1
    fi

    SUBSCRIBERS=`/usr/local/bin/ezmlm/ezmlm-list $LIST_DIR`

    VPOPMAIL_POST="${VPOPMAIL_POST}
                \"$LIST_MD5\":
                {
                    \"email\": \"$LIST\",
                    \"status\": true,
                    \"subscriber\":
                    {"
    if [ ${#SUBSCRIBERS} == 0 ];then
        VPOPMAIL_POST="${VPOPMAIL_POST}
                    }
                },"
        return 2
    fi

    for SUBSCRIBER in $SUBSCRIBERS
    do
        if ! isEmail $SUBSCRIBER ; then
            continue
        fi

        SUBSCRIBER_MD5=`echo -n "$SUBSCRIBER" | md5sum | awk '{print $1}'`
        VPOPMAIL_POST="${VPOPMAIL_POST}
                        \"$SUBSCRIBER_MD5\": \"$SUBSCRIBER\","
    done

    VPOPMAIL_POST="${VPOPMAIL_POST:0:${#VPOPMAIL_POST} -1}
                    }
                },"
}

buildDomainRobot() {
    if [ -z "$DOMAIN" -o -z "$DOMAIN_MD5" ]; then
        return
    fi

    getRobots
    if [ ${#ROBOTS} == 0 ]; then
        return
    fi

    VPOPMAIL_POST="${VPOPMAIL_POST},
            \"robots\":
            {"

    for ROBOT in $ROBOTS
    do
        if ! isEmail $ROBOT ; then
            continue
        fi

        ROBOT_MD5=`echo -n "$ROBOT" | md5sum | awk '{print $1}'`

        VPOPMAIL_POST="${VPOPMAIL_POST}
                \"$ROBOT_MD5\":
                {
                    \"email\": \"$ROBOT\""

        buildDomainRobotDetails "$ROBOT"
    done

    VPOPMAIL_POST="${VPOPMAIL_POST:0:${#VPOPMAIL_POST} -1}
            }"
}

buildDomainMailingList() {
    if [ -z "$DOMAIN" -o -z "$DOMAIN_MD5" ]; then
        return
    fi

    getMailingLists
    if [ ${#MAILING_LISTS} == 0 ]; then
        return
    fi

    VPOPMAIL_POST="${VPOPMAIL_POST},
            \"lists\":
            {"

    for LIST in $MAILING_LISTS
    do
        if ! isEmail $LIST ; then
            continue
        fi

        LIST_MD5=`echo -n "$LIST" | md5sum | awk '{print $1}'`

        buildDomainMailingListDetails "$LIST"
    done

    VPOPMAIL_POST="${VPOPMAIL_POST:0:${#VPOPMAIL_POST} -1}
            }"
}

buildDomainForwarders() {
    if [ -z "$DOMAIN" -o -z "$DOMAIN_MD5" ]; then
        return
    fi

    getForwarders
    if [ ${#FORWARDERS} == 0 ]; then
        return
    fi

    VPOPMAIL_POST="${VPOPMAIL_POST},
            \"forwarders\":
            {"

    for FORWARDER in $FORWARDERS
    do
        if ! isEmail $FORWARDER ; then
            continue
        fi

        FORWARDER_MD5=`echo -n "$FORWARDER" | md5sum | awk '{print $1}'`

        buildDomainForwarderDetails "$FORWARDER"
    done

    if [ ${#FORWARDER_MD5} -eq 0 ]; then
        VPOPMAIL_POST="${VPOPMAIL_POST/
        \"forwarders\":/}}"
    fi

    VPOPMAIL_POST="${VPOPMAIL_POST:0:${#VPOPMAIL_POST} -1}
            }"
}

buildDomainCatchAll() {
    if [ -z "$DOMAIN" -o -z "$DOMAIN_MD5" ]; then
        return
    fi    

    DOMAIN_DIR=`$VPOPMAIL_BIN/vdominfo -d $DOMAIN`
    QFILE_DEFAULT="$DOMAIN_DIR/.qmail-default"

    if [ ! -f "$QFILE_DEFAULT" ]; then
        return 1;
    fi
    if [ ! -r "$QFILE_DEFAULT" ]; then
        echo "$QFILE_DEFAULT ist not readable. Can't access catch all for $DOMAIN."
        return 1;
    fi

    BEHAVIOR=`cat $QFILE_DEFAULT | awk '{print $4}'`
    if [ "$BEHAVIOR" == "$CATCHALL_DIRECTIVE_DELETE" ]; then
        BEHAVIOR="delete"
    elif [ "$BEHAVIOR" == "$CATCHALL_DIRECTIVE_BOUNCE" ]; then
        BEHAVIOR="bounce"
    fi

    VPOPMAIL_POST="${VPOPMAIL_POST},
            \"catchall\":
            {
                \"behavior\": \"$BEHAVIOR\"
            }"
}

buildDomainAccounts() {
    if [ -z "$DOMAIN" -o -z "$DOMAIN_MD5" ]; then
        return
    fi

    getAccounts
    if [ ${#ACCOUNTS} == 0 ]; then
        return
    fi

    VPOPMAIL_POST="${VPOPMAIL_POST},
            \"accounts\":
            {"

    for ACCOUNT in $ACCOUNTS
    do
        if ! isEmail $ACCOUNT ; then
            continue
        fi

        ACCOUNT_MD5=`echo -n "$ACCOUNT" | md5sum | awk '{print $1}'`

        buildDomainAccountDetails "$ACCOUNT"
    done

    VPOPMAIL_POST="${VPOPMAIL_POST:0:${#VPOPMAIL_POST} -1}
            }"
}

buildDomain() {
    if [ -z "$DOMAIN" -o -z "$DOMAIN_MD5" ]; then
        return 1
    fi

    VPOPMAIL_POST="${VPOPMAIL_POST}
        \"$DOMAIN_MD5\":
        {
            \"name\": \"$DOMAIN\""
}

_escapeJSON() {
    RAW=$1
    RAW=${RAW//\\/\\\\} # \.
    RAW=${RAW//\//\\\/} # /.
    RAW=${RAW//\"/\\\"} # ".
    RAW=${RAW//	/\\\\t} # \t (tab)
    RAW=${RAW//
/\\\n}                  # \n (newline)
    RAW=${RAW//^M/\\\r} # \r (carriage return)
    RAW=${RAW//^L/\\\f} # \f (form feed)
    RAW=${RAW//^H/\\\b} # \b (backspace)
    echo "$RAW"
}

completeReport() {

    getDomains
    VPOPMAIL_POST="{
    \"domains\":
    {"

    for DOMAIN in $DOMAINS
    do
        if [ -z "$DOMAIN" ]; then
            continue
        fi

        DOMAIN_MD5=`echo -n "$DOMAIN" | md5sum | awk '{print $1}'`

        buildDomain
        buildDomainAccounts
        buildDomainForwarders
        buildDomainCatchAll
        buildDomainRobot
        buildDomainMailingList
        VPOPMAIL_POST="${VPOPMAIL_POST}
        },"
    done

    VPOPMAIL_POST="${VPOPMAIL_POST:0:${#VPOPMAIL_POST} -1}
    }
}"

    echo "$VPOPMAIL_POST"
    exit 0
}

if [ ! -d "$VPOPMAIL_BIN" ]; then
    echo "vpopmail bin folder not found in $VPOPMAIL_BIN"
    exit 202
fi

case $1 in
    *)
        if [ -z "$2" ]; then
            completeReport
        fi
    ;;
esac

echo $MESSAGE_USAGE
exit 201