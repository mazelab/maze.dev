#
# maze nginx report script - mazenginx/templates/scripts/maze-vhost.erb
#
#
# this file was generated by puppet
# do not overwrite this file, or puppet will overwrite it again...
# so only customize this file in puppet itself
#
###############################################################################

setVhost()
{
    NEW_VHOST_FILE="${NGINX_DIR_AVAILABLE}/${VHOST_NAME}"
    echo -e "${VHOST_CONTENT}" > $NEW_VHOST_FILE
    if [ `echo "$?"` != 0 ]; then
        echo "Could not write Vhost of $VHOST_NAME in $NEW_VHOST_FILE"
        exit 205
    fi

    if [ "$DISABLE" == true ]; then
        RESULT_DISABLE=`disableVhost`
        if [ `echo "$?"` != 0 ]; then
            echo "$RESULT_DISABLE"
            exit 215
        fi
    else
        RESULT_ENABLE=`enableVhost`
        if [ `echo "$?"` != 0 ]; then
            echo "$RESULT_ENABLE"
            exit 207
        fi
    fi

    exit 0
}

checkNginxConfig()
{
    if [ ! -d "$NGINX_DIR" -o ! -d "$NGINX_DIR_AVAILABLE" -o ! -d "$NGINX_DIR_ENABLED" ]; then
        echo "Invalid nginx config dir"
        exit 201
    fi

    if [ ! -w "$NGINX_DIR_AVAILABLE" -o ! -w "$NGINX_DIR_ENABLED" ]; then
        echo "Invalid nginx config dir not writable"
        exit 204
    fi    
}

deleteVhost()
{
    VHOST_PATH=`getVhostPath`
    if [ `echo "$?"` != 0 ]; then
        echo "Vhost ${VHOST_NAME} does not exist"
        exit 0
    fi

    RESULT_DISABLE=`disableVhost`
    if [ `echo "$?"` != 0 ]; then
        echo "$RESULT_DISABLE"
        exit 216
    fi

    RESULT_DELETE=`rm $VHOST_PATH`
    if [ `echo "$?"` != 0 ]; then
        echo "Could not delete Vhost file ${VHOST_PATH}"
        exit 217
    fi

    exit 0
}

disableVhost()
{
    VHOST_FILE_DISABLED="${NGINX_DIR_AVAILABLE}/${VHOST_NAME}"
    VHOST_FILE_ENABLED="${NGINX_DIR_ENABLED}/${VHOST_NAME}"
    
    if [ ! -f "$VHOST_FILE_ENABLED" ]; then
        echo "Vhost ${VHOST_NAME} allready disabled"
        exit 0
    fi

    if [ ! -f "$VHOST_FILE_DISABLED" ]; then
        cp $VHOST_FILE_ENABLED $VHOST_FILE_DISABLED
        if [ `echo "$?"` != 0 ]; then
            echo "Could not copy Vhost $VHOST_FILE_ENABLED to $VHOST_FILE_DISABLED"
            exit 212
        fi
    fi

    rm $VHOST_FILE_ENABLED
    if [ `echo "$?"` != 0 ]; then
        echo "Could not remove Vhost file $VHOST_FILE_DISABLED"
        exit 213
    fi

    RESULT_RELOAD=`nginxReload`
    if [ `echo "$?"` != 0 ]; then
        echo "$RESULT_RELOAD"
        exit 214
    fi

    exit 0
}

enableVhost()
{
    VHOST_FILE_DISABLED="${NGINX_DIR_AVAILABLE}/${VHOST_NAME}"
    VHOST_FILE_ENABLED="${NGINX_DIR_ENABLED}/${VHOST_NAME}"
    
    if [ -f "$VHOST_FILE_ENABLED" ]; then
        RESULT_RELOAD=`nginxReload`
        if [ `echo "$?"` != 0 ]; then
            RESULT_DISABLE=`disableVhost`

            echo "Could not reload Nginx. Reverted Nginx config and disabled vhost ${VHOST_NAME}"
            exit 209
        fi

        echo "Vhost ${VHOST_NAME} allready enabled"
        exit 0
    fi

    if [ ! -f "$VHOST_FILE_DISABLED" ]; then
        echo "Vhost file for ${VHOST_NAME} in ${NGINX_DIR_AVAILABLE} not found"
        exit 206
    fi

    ln -s $VHOST_FILE_DISABLED $NGINX_DIR_ENABLED
    if [ `echo "$?"` != 0 ]; then
        echo "Could not link Vhost of $VHOST_FILE_DISABLED to NGINX_DIR_ENABLED"
        exit 207
    fi

    RESULT_RELOAD=`nginxReload`
    if [ `echo "$?"` != 0 ]; then
        RESULT_DISABLE=`disableVhost`

        echo "Could not reload Nginx. Reverted Nginx config and disabled vhost ${VHOST_NAME}"
        exit 209
    fi

    exit 0
}

loadVhost()
{
    VHOST_FILE=`getVhostPath`
    if [ `echo "$?"` != 0 ]; then
        echo "Vhost file for ${VHOST_NAME} not found"
        exit 202
    fi

    echo "`cat ${VHOST_FILE}`"
    exit 0
}

getVhost()
{
    VHOST=`loadVhost`
    if [ `echo "$?"` != 0 ]; then
        echo "Vhost $VHOST_NAME not found"
        exit 203
    fi

    echo "$VHOST"
    exit 0
}

getVhosts()
{
    ls $NGINX_DIR_AVAILABLE

    exit 0
}

getVhostPath()
{
    VHOST_FILE="${NGINX_DIR_AVAILABLE}/${VHOST_NAME}";

    if [ ! -f "$VHOST_FILE" ]; then
        echo "Vhost file for ${VHOST_NAME} not found"
        exit 202
        
    fi

    echo "$VHOST_FILE"
    exit 0
}

nginxReload()
{

    if [ ! -z "$NGINX_COMMAND_CONFIGTEST" ]; then
        CONFIG_TEST=`$NGINX_COMMAND_CONFIGTEST`
        if [ `echo "$?"` != 0 ]; then
            echo "Nginx config is corrupted. Manual resolving necessary"
            echo "$CONFIG_TEST"
            exit 210
        fi
    fi
    
    if [ ! -z "$NGINX_COMMAND_STATUS" -a ! -z "$NGINX_COMMAND_RELOAD" ]; then
        SERVICE_RUNNING=`$NGINX_COMMAND_STATUS`
        if [ `echo "$?"` == 0 ] ; then
            RELOAD=`$NGINX_COMMAND_RELOAD`
            if [ `echo "$?"` != 0 ]; then
                echo "Reloading Nginx config failed"
                echo "$RELOAD"
                exit 211
            fi
        fi
    fi

    exit 0
}

renderHelp()
{
    echo "Usage: maze nginx vhost <[options]> [|path|set|enable|delete|disable]
$*
    Options:
            -N              Set Vhost Name
            -C              Set Vhost content
            -h              Show help
            -d              Set Vhost State to disabled

    Methods:
            [] default      Show Options of a certain vhost

                            Required Parameters:
                                -N Vhost name
                            
            [path]          Show file path of a certain vhost

                            Required Parameters:
                                -N Vhost name

            [set]           Set Vhost config

                            Required Parameters:
                                -N Vhost name
                                -C vhost content

            [enable]        Enables Vhost

                            Required Parameters:
                                -N Vhost name

            [disable]       Disables Vhost

                            Required Parameters:
                                -N Vhost name

            [delete]        Deletes Vhost

                            Required Parameters:
                                -N Vhost name
"
}

# parse options
while getopts "dhN:C:" opt; do
    case $opt in
        N)
            if [[ $OPTARG = -* ]]; then
                echo "Option -N has a invalid argument"
                exit 103
            fi

            VHOST_NAME=$OPTARG
        ;;
        C)
            if [[ $OPTARG = -* ]]; then
                echo "Option -C has a invalid argument"
                exit 101
            fi

            VHOST_CONTENT=$OPTARG
        ;;
        h)
            renderHelp
            exit 0
        ;;
        d)
            DISABLE=true
        ;;
        \?)
            renderHelp
            exit 100
        ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
        ;;
    esac
done

# parse actions
ARG1=${@:$OPTIND:1}
case $ARG1 in
    enable)
        if [ ! -z "$VHOST_NAME" ]; then
            checkNginxConfig

            enableVhost
        fi
    ;;
    delete)
        if [ ! -z "$VHOST_NAME" ]; then
            checkNginxConfig

            deleteVhost
        fi
    ;;
    disable)
        if [ ! -z "$VHOST_NAME" ]; then
            checkNginxConfig

            disableVhost
        fi
    ;;
    path)
        if [ ! -z "$VHOST_NAME" ]; then
            checkNginxConfig

            getVhostPath
        fi
    ;;
    set)
        if [ ! -z "$VHOST_NAME" -a ! -z "$VHOST_CONTENT" ]; then
            checkNginxConfig

            setVhost
        fi
    ;;
    *)
        if [ -z "$ARG1" -a ! -z "$VHOST_NAME" ]; then
            checkNginxConfig

            getVhost
        fi

        if [ -z "$ARG1" ]; then
            checkNginxConfig

            getVhosts
        fi
    ;;
esac

renderHelp
exit 100