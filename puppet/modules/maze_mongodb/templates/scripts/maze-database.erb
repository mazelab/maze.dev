##
# maze script to manage mongodb databases
#
###############################################################################

##
# deletes a certain database
##
deleteDatabase()
{
    CMD="db.dropDatabase().ok";
    if ! RESULT_DELETE=`mongodbCmd "$CMD"` || test "$RESULT_DELETE" != "1" ; then
        echo "failed to delete database $DB_NAME"
        return 102
    fi
}

###
# show stats of a certain database
###
getDbStats()
{
    CMD="[db.stats()].forEach(function(doc){print('dataSize: '+doc.dataSize);print('indexSize: '+doc.indexSize);print('storageSize: '+doc.storageSize);print('fileSize: '+doc.fileSize)})"
    if ! DB_STATS=`mongodbCmd "$CMD"` ; then
        echo "failed to fetch database stats from $DB_NAME"
        return 129
    fi

    echo "stats in Byte"
    echo "$DB_STATS"
}

###
# list all databases
#
# ignores empty databases
###
listDatabases()
{
    CMD="db.runCommand({listDatabases: 1}).databases.forEach(function(doc){if(doc.empty !== true) {print(doc.name)};});"
    if ! DB_JSON=`mongodbCmd "$CMD" "admin"` ; then
        echo "failed to fetch databases list"
        return 101
    fi

    echo "$DB_JSON"
}

###
# render help info
###
renderHelp()
{
    echo "Usage: maze mongodb database <[options]> [|stats|delete]
$*
    Options:
            -D              name of the database
            -h              show help

    Methods:
            [] default      list databases

                            ignores empty databases

            [delete]        deletes existing database

            [stats]         shows complete stats

                            optional parameters:
                                -D      shows stats of a certain database
"
}

# parse options
while getopts "ehP:D:" opt; do
    case $opt in
        D)
            if [[ $OPTARG = -* ]]; then
                echo "Option -P has a invalid argument"
                exit 1
            fi

            DB_NAME="$OPTARG"
        ;;
        h)
            renderHelp && exit 0
        ;;
        :)
            renderHelp && exit 100
        ;;
    esac
done

shift `expr $OPTIND - 1`
COMMAND="$1"

checkEnvironment

# parse actions
case $COMMAND in
    delete)
        if [ -n "$DB_NAME" ]; then
            deleteDatabase
            exit "$?"
        fi
    ;;
    stats)
        if [ -n "$DB_NAME" ]; then
            getDbStats
            exit "$?"
        fi
    ;;
    *)
        listDatabases
        exit "$?"
    ;;
esac

renderHelp
exit 100