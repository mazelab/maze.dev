#
# maze mongodb client script - mazemongodb/templates/scripts/maze-client.erb
#
# this file was generated by puppet
# do not overwrite this file, or puppet will overwrite it again...
# so only customize this file in puppet itself
#
###############################################################################

MONGODB_BIN="`which mongo`"

####
# default behavior
####
DATABASE_STATE="false"

checkEnvironment()
{
    if [ -z "$MONGODB_BIN" ]; then
        echo "mongodb binary not found"
        exit 110
    fi
}

###
# build mongodb shell cmd and execute it
###
mongodbCmd()
{
    CMD="$1";
    if [ -z "$DATABASE" -o -z "$CMD" ]; then
        return 120
    fi

    mongo --eval "${CMD}" "$DATABASE"
}

###
# render help info
###
renderHelp()
{
    echo "Usage: maze mongodb database <[options]> [|database] [|set|enable|disable|delete]
$*
    Options:
            -Q              quota in MB
            -P              password
            -d              disable database (not readable anymore)
            -h              show help

    Methods:
            [] default      Show database info

            [set]           set database

                            Required Parameters:
                                -Q quota in MB
                                -P password

                            Optional Parameters:
                                -d disable database (not readable anymore)

            [enable]        enable existing database

            [disable]       disable existing database

            [delete]        deletes existing database
"
}

###
# set database
###
setDatabase()
{
    echo "set database $DATABASE"

    CMD="db.addUser({user:\"${DATABASE}\", pwd: \"${PASSWORD}\", roles: [\"readWrite\", \"dbAdmin\", \"userAdmin\"]});"
    if ! mongodbCmd "$CMD" ; then
        echo "failed to add database $DATABASE"
        exit 120
    fi
}

# parse options
while getopts "dhP:Q:" opt; do
    case $opt in
        P)
            if [[ $OPTARG = -* ]]; then
                echo "Option -P has a invalid argument"
                exit 1
            fi

            PASSWORD="$OPTARG"
        ;;
        Q)
            if [[ $OPTARG = -* ]]; then
                echo "Option -Q has a invalid argument"
                exit 1
            fi
            QUOTA="$OPTARG"
        ;;
        d)
            DATABASE_STATE="false"
        ;;
        h)
            renderHelp && exit 0
        ;;
        :)
            renderHelp && exit 100
        ;;
    esac
done

shift `expr $OPTIND - 1`
DATABASE="$1"
COMMAND="$2"

checkEnvironment

# parse actions
case $COMMAND in
    enable)
        echo "@todo enable database" && exit 1
    ;;
    disable)
        echo "@todo disable database" && exit 1
    ;;
    set)
        if [ -n "$DATABASE" -a -n "$QUOTA" -a -n "$PASSWORD" ]; then
            setDatabase && exit 0
        fi
    ;;
    *)
        if [ -n "$DATABASE" ]; then
            echo "@todo show certain database" && exit 1
        fi

        echo "@todo show databases" && exit 1
    ;;
esac

renderHelp
exit 100