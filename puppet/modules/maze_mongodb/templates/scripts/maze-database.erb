##
# maze script to manage mongodb databases authentication
#
###############################################################################

##
# Mongodb admin authentication
#
# if no admin authentication data is given then it tries without auth
#
# required admin roles and used actions
#   clusterAdmin:
#           - dropDatabase
#           - listDatabases
#
#   userAdminAnyDatabase:
#           - insert (only system.users collections)
#            -update (only system.users collections)
#
#   dbAdminAnyDatabase:
#           - dbStats
#
##

# set admin user name for admin authentication
ADMIN_USER=""
# set admin password for authentication
ADMIN_PWD=""
# set admin database for authentication
ADMIN_DB=""

####
# default behavior
####
DB_OWNER_ROLES="\"readWrite\", \"dbAdmin\", \"userAdmin\""
PASSWORD_ENCRYPTED="false"

MONGODB_BIN="`which mongo`"

##
# check environment
##
checkEnvironment()
{
    if [ -z "$MONGODB_BIN" ]; then
        echo "mongodb binary not found"
        exit 110
    fi
}

##
# create new database
##
createDatabase()
{
    CMD="printjson(db.system.users.insert({user:\"${DATABASE}\", pwd: \"${PASSWORD}\", roles: [$DB_OWNER_ROLES]}))";
    if ! mongodbCmd "$CMD" ; then
        echo "failed to create database $DATABASE"
        return 120
    fi
}

##
# deletes a certain Database
##
deleteDatabase()
{
    CMD="printjson(db.dropDatabase())";
    if ! RESULT_DELETE=`mongodbCmd "$CMD"` ; then
        echo "failed to delete database $DATABASE"
        return 127
    fi

    if [ "`echo "$RESULT_DELETE" | getJsonVal "ok"`" != "1" ]; then
        echo "failed to delete database $DATABASE"
        if RESULT_ERROR=`echo "$RESULT_DELETE" | getJsonVal "errmsg"`; then
            echo -n "mongodb error message: "
            echo "$RESULT_ERROR"
        fi

        return 127
    fi
}

##
# encrypt given password string
##
encryptPassword()
{
    if [ -z "$1" ]; then
        echo "no password given"
        return 125
    fi

    echo -n "$DATABASE:mongo:$1" | md5sum | awk '{print($1)}'
    return 0
}

##
# get a certain database
##
getDatabase()
{
    CMD="printjson(db.system.users.findOne({user:\"${DATABASE}\"}, {user: 1, pwd: 1, _id: 0}))"
    if ! DB_JSON=`mongodbCmd "$CMD"` ; then
        echo "failed to fetch database $DATABASE"
        return 121
    fi

    if [ "$DB_JSON" == "null" ]; then
        echo "database $DATABASE not found"
        return 123
    fi

    if ! DB_USER=`echo "$DB_JSON" | getJsonVal "user"` || ! DB_PWD=`echo "$DB_JSON" | getJsonVal "pwd"`; then
        echo "could not evaluate mongodb return"
        return 122
    fi

    echo "db: $DATABASE"
    echo "user: $DB_USER"
    echo "pwd: $DB_PWD"
    echo

    getDatabaseStats
}

getDatabaseStats()
{
    CMD="printjson(db.stats())"
    if ! DB_JSON=`mongodbCmd "$CMD"` ; then
        echo "failed to fetch database stats from $DATABASE"
        return 129
    fi

    if [ "`echo "$DB_JSON" | getJsonVal "ok"`" != "1" ]; then
        echo "failed to fetch database stats from $DATABASE"
        if RESULT_ERROR=`echo "$DB_JSON" | getJsonVal "errmsg"`; then
            echo -n "mongodb error message: "
            echo "$RESULT_ERROR"
        fi

        return 129
    fi

    if ! DB_DATASIZE=`echo "$DB_JSON" | getJsonVal "dataSize"` || ! DB_INDEXSIZE=`echo "$DB_JSON" | getJsonVal "indexSize"` || ! DB_STORAGESIZE=`echo "$DB_JSON" | getJsonVal "storageSize"` || ! DB_FILESIZE=`echo "$DB_JSON" | getJsonVal "fileSize"`; then
        echo "could not evaluate mongodb return"
        return 122
    fi

    echo "stats in Byte"
    echo "dataSize: $DB_DATASIZE"
    echo "indexSize: $DB_INDEXSIZE"
    echo "storageSize: $DB_STORAGESIZE"
    echo "fileSize: $DB_FILESIZE"
}

##
# get all databases
#
# empty databases, db admin and db local will be ignored
#
# also ignores databases which does not have a user with the name of the database
##
getDatabases()
{
    CMD="printjson(db.runCommand( { listDatabases: 1 } ))"
    if ! DB_JSON=`mongodbCmd "$CMD" "admin"` ; then
        echo "failed to fetch databases list"
        return 128
    fi

    if ! DBS=`echo "$DB_JSON" | parseDatabaseJsonListing`; then
        echo "failed to fetch databases list"
        return 128
    fi

    echo "$DBS"
}

##
# get value of the given key from json (stdin)
##
getJsonVal()
{
    if [ -z "$1" ]; then
        echo "no key given"
        return 126
    fi

    if ! JSON_VAL=`python -c "import json,sys;obj=json.load(sys.stdin);print obj[\"$1\"]" 2>/dev/null`; then
        echo "failed to fetch json value"
        return 126
    fi

    echo "$JSON_VAL"
    return 0
}

###
# build mongodb shell cmd and execute it
#
# @param string mongodb command line
# @param string (optional) database to use if not provided database
###
mongodbCmd()
{
    CMD="$1"
    if [ -n "$2" ]; then
        CMD_DB="$2"
    else
        CMD_DB="$DATABASE"
    fi

    if [ -z "$CMD_DB" -o -z "$CMD" ]; then
        return 120
    fi

    if [ -n "$ADMIN_USER" -a -n "$ADMIN_PWD" -a -n "$ADMIN_DB" ]; then
        mongo --quiet -u "$ADMIN_USER" -p "$ADMIN_PWD" --authenticationDatabase "$ADMIN_DB" --eval "${CMD}" "$CMD_DB"
    else
        mongo --quiet --eval "${CMD}" "$CMD_DB"
    fi
}

parseDatabaseJsonListing()
{
    if ! DBS=`python -c "exec(\"import json,sys;obj=json.load(sys.stdin);databases=obj['databases'];\nfor database in databases:\n if database['name'] in ('admin', 'local') or database['empty']: continue;\n print database['name'];\")" 2>/dev/null`; then
        echo "failed to fetch json value"
        return 126
    fi

    echo "$DBS"
}

###
# render help info
###
renderHelp()
{
    echo "Usage: maze mongodb database <[options]> [|database] [|set|stats|delete]
$*
    Options:
            -P              password
            -e              given password is already encrypted [md5(username:mongo:password)]
            -h              show help

    Methods:
            [] default      Show database info

            [delete]        deletes existing database

            [set]           set database

                            Required Parameters:
                                -P password

                            Optional Parameters:
                                -e given password is already encrypted [md5(username:mongo:password)]

            [stats]         Show database stats
"
}

###
# set database
###
setDatabase()
{
    if [ "$PASSWORD_ENCRYPTED" == "false" ]; then
        PASSWORD=`encryptPassword "$PASSWORD"`
    fi

    DB_INFO=`getDatabase`
    STATUS="$?"

    if [ "$STATUS" == 123 ]; then
        echo "creating database $DATABASE..."
        if ! DB_CREATE=`createDatabase`; then
            echo "$DB_CREATE"
            return 120
        fi
        echo "created database $DATABASE"
        return 0
    elif [ "$STATUS" != 0 ]; then
        echo "$DB_INFO"
        return "$STATUS"
    fi

    DB_PWD=`echo "$DB_INFO" | grep "pwd: " | awk -F': ' '{print($2)}'`
    if [ -n "$DB_PWD" ] && [ "$PASSWORD" != "$DB_PWD" ]; then
        echo "update password of database $DATABASE.."
        if ! DB_PASSWORD_SET=`setDatabasePassword`; then
            echo "$DB_PASSWORD_SET"
            return 124
        fi
        echo "password updated"
    fi
}

##
# update db owner password
##
setDatabasePassword()
{
    CMD="db.system.users.update({user: \"$DATABASE\"}, {\$set: {pwd: \"$PASSWORD\"}})";
    if ! mongodbCmd "$CMD" ; then
        echo "failed to set password for database $DATABASE"
        return 124
    fi
}

# parse options
while getopts "ehP:" opt; do
    case $opt in
        P)
            if [[ $OPTARG = -* ]]; then
                echo "Option -P has a invalid argument"
                exit 1
            fi

            PASSWORD="$OPTARG"
        ;;
        h)
            renderHelp && exit 0
        ;;
        e)
            PASSWORD_ENCRYPTED="true"
        ;;
        :)
            renderHelp && exit 100
        ;;
    esac
done

shift `expr $OPTIND - 1`
DATABASE="$1"
COMMAND="$2"

checkEnvironment

if [ "$DATABASE" == "admin" -o "$DATABASE" == "local" ]; then
    echo "Databases admin and local are reserved!"
    exit 119
fi

# parse actions
case $COMMAND in
    delete)
        if [ -n "$DATABASE" ]; then
            deleteDatabase
            exit "$?"
        fi
    ;;
    set)
        if [ -n "$DATABASE" -a -n "$PASSWORD" ]; then
            setDatabase
            exit "$?"
        fi
    ;;
    stats)
        if [ -n "$DATABASE" ]; then
            getDatabaseStats
            exit "$?"
        fi
    ;;
    *)
        if [ -n "$DATABASE" ]; then
            getDatabase
        else
            getDatabases
        fi
        exit "$?"
    ;;
esac

renderHelp
exit 100