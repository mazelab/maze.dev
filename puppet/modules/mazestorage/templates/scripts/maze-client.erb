#
# maze storage client script - mazestorage/templates/scripts/maze-client.erb
#
# this file was generated by puppet
# do not overwrite this file, or puppet will overwrite it again...
# so only customize this file in puppet itself
#
###############################################################################

## default params
STORAGE_STATE="false"
STORAGE_FSTAB="true"

backupFstab()
{
    if [ ! -f "/etc/fstab" ]; then
        return 1
    fi

    if ! cp /etc/fstab /etc/fstab.maze.bk; then
        return 1
    fi
}

checkEnvironment()
{
    if [ ! -d "$STORAGE_DEVICES_DIR" ];then
        if [ -z "$STORAGE_DEVICES_DIR" ]; then
            echo "maze storage device folder not set"
            exit 103
        fi
        if ! `mkdir $STORAGE_DEVICES_DIR`;then
            echo "Could not create maze storage folder in ${STORAGE_DEVICES_DIR}"
            exit 104
        fi
    fi
    if [ ! -d "$STORAGE_MOUNT_DIR" ];then
        if [ -z "$STORAGE_MOUNT_DIR" ]; then
            echo "maze mount folder not set"
            exit 105
        fi
        if ! `mkdir -p $STORAGE_MOUNT_DIR`;then
            echo "Could not create mount folder in ${STORAGE_MOUNT_DIR}"
            exit 105
        fi
    fi
    if ! `grep "^$STORAGE_GROUP:" /etc/group > /dev/null`;then
        if ! `groupadd "$STORAGE_GROUP" > /dev/null`; then
            echo "storage user group $STORAGE_GROUP does not exist. Failed to create..."
            exit 106
        fi
    fi
}

createStorage()
{
    if ! validateAvailableSpace "$QUOTA"; then
        exit 110
    fi

    echo "creating storage $STORAGE_FILE. This may take a while..."
    STORAGE_CREATE=`dd if=/dev/zero of=$STORAGE_FILE bs=$STORAGE_BLOCK count=$QUOTA_BLOCK >/dev/null`
    if [ "$?" != 0 ]; then
        echo "failed to create storage ${STORAGE}"
        exit 110
    fi

    echo "format storage $STORAGE_FILE..."
    STORAGE_FS=`mkfs -t ext3 -F -q $STORAGE_FILE`
    if [ "$?" != 0 ]; then
        echo "failed to format storage ${STORAGE}"
        exit 110
    fi
}

createUser()
{
    if [ ! -d "$STORAGE_HOME" ]; then
        if ! `mkdir $STORAGE_HOME`;then
            echo "Could not create home folder fore user ${STORAGE}"
            exit 120
        fi
    fi
    if ! `setStorageHomePermissions`; then
        exit 120
    fi

    echo "creating user..."
    if ! `adduser --no-create-home --ingroup "$STORAGE_GROUP" --home "$STORAGE_HOME" --shell "/bin/false" --disabled-password --gecos "" "$STORAGE" > /dev/null`; then
        echo "Could not add user $STORAGE"
        exit 120
    fi
}

deleteStorage()
{
    initStorageVars "$STORAGE"
    if [ ! -f "$STORAGE_FILE" ]; then
        echo "storage $STORAGE does not exist"
        exit 112
    fi
    
    STORAGE_UNMOUNT=`unmountStorage`
    if [ "$?" != 0 ]; then
        echo "failed to disable storage $STORAGE";
        exit 115
    fi

    echo "deleting user"
    if ! `deluser "$STORAGE" > /dev/null`; then
        echo "failed to delete user of storage $STORAGE"
        exit 116
    fi

    echo "$STORAGE_UNMOUNT"
    echo "deleting storage $STORAGE..."
    if ! `rm "$STORAGE_FILE"`;then
        echo "failed to delete storage $STORAGE"
        exit 116
    fi
    if [ -d "$STORAGE_HOME" ]; then 
        echo "deleting user direcotry $STORAGE_HOME"
        if ! `rm -r "$STORAGE_HOME"`;then
            echo "failed to delete user dir $STORAGE_HOME"
            exit 116
        fi
    fi

    exit 0
}

getStorageList()
{
    STORAGES=`ls -1 $STORAGE_DEVICES_DIR`
    for STORAGE_NAME in $STORAGES; do
        getStorage "$STORAGE_NAME"
        echo ""
    done
}

getStorage()
{
    if [ -z "$1" ]; then
        echo "no storage name given"
        exit
    fi

    initStorageVars "$1"

    STORAGE_SIZE=`ls -l --block-size=1M $STORAGE_FILE | awk '{print($5)}'`
    STORAGE_SIZE_REAL=`du -sm $STORAGE_FILE | awk '{print($1)}'`

    if `mount | grep "$STORAGE_FILE on $STORAGE_MOUNT_PATH " >/dev/null`; then
        STORAGE_STATE="enabled"
        if ! `cat /etc/fstab | grep "$STORAGE_FSTAB_LINE" >/dev/null`; then
            STORAGE_STATE="$STORAGE_STATE (local)"
        fi
    else
        STORAGE_STATE="disabled"
    fi

    echo "name: $STORAGE"
    echo "path: $STORAGE_FILE"
    echo "storage home: $STORAGE_HOME"
    echo "mountpoint: $STORAGE_MOUNT_PATH"
    echo "status: $STORAGE_STATE"
    echo "size: $STORAGE_SIZE MB"
    echo "real size: $STORAGE_SIZE_REAL MB"
}

initDiskSpaceVars()
{
    STORAGES_SIZE=`ls -l --block-size=1M $STORAGE_DEVICES_DIR  | awk '{s+=$5} END {print s}'`
    STORAGES_SIZE_REAL=`du -sm $STORAGE_DEVICES_DIR | awk '{print($1)}'`

    DISK_SPACE=`df -hm "$STORAGE_DEVICES_DIR" | tail -n 1 | awk '{print($4)}'`
    # -1 to avoid rounding problems
    DISK_SPACE=`expr $DISK_SPACE + $STORAGES_SIZE_REAL - 1`
    DISK_SPACE=`expr $DISK_SPACE - $STORAGES_SIZE`

    if [ ! -z "$DISK_CAP" ]; then
        DISK_SPACE=`expr $DISK_SPACE - $DISK_CAP`
    fi
}

initQuotaVars()
{
    if [ -z "$1" ]; then
        return 1
    fi

    if ! validateQuota "$1"; then
        exit $?
    fi

    QUOTA="$1"
    QUOTA_BLOCK=`expr $QUOTA \\* $STORAGE_BLOCK`
}

initStorageVars()
{
    if [ -z "$1" ]; then
        return 1
    fi

    STORAGE="$1"

    STORAGE_HOME="${STORAGE_MOUNT_DIR}/${STORAGE}"
    STORAGE_MOUNT_PATH="${STORAGE_HOME}/${STORAGE_MOUNT_NAME}"
    STORAGE_FILE="${STORAGE_DEVICES_DIR}/${STORAGE}"
    STORAGE_FSTAB_LINE="${STORAGE_FILE} ${STORAGE_MOUNT_PATH} ext3 rw,loop  0 0"
}

mountStorage()
{
    if [ ! -f "$STORAGE_FILE" ]; then
        echo "storage $STORAGE does not exist"
        exit 112
    fi

    if [ ! -d "$STORAGE_HOME" ]; then
        if ! `mkdir $STORAGE_HOME`;then
            echo "Could not create home folder fore user ${STORAGE}"
            exit 120
        fi
    fi
    if ! `setStorageHomePermissions`; then
        exit 120
    fi
 
    if [ ! -d "$STORAGE_MOUNT_PATH" ]; then
        if ! `mkdir $STORAGE_MOUNT_PATH`;then
            echo "Could not create mount folder for storage ${STORAGE}"
            exit 113
        fi
    fi

    mount | grep "$STORAGE_FILE on $STORAGE_MOUNT_PATH " > /dev/null
    if [ "$?" == 0 ]; then
        echo "storage $STORAGE is allready mounted"
        exit 0
    fi

    echo "mounting storage $STORAGE..."
    if ! `mount $STORAGE_FILE $STORAGE_MOUNT_PATH -t ext3 -o rw,loop`; then
        echo "mount $STORAGE failed"
        exit 114
    fi
    if ! `setStorageMountPermissions`; then
        echo "Failed to set mounting permissions. unmounting..."
        STORAGE_UNMOUNT=`unmountStorage`
        if [ "$?" != 0 ]; then
            echo "$STORGE_UNMOUNT"
        fi
        exit 120
    fi

    if [ $STORAGE_FSTAB == "true" ]; then
        if ! setFstabLine; then
            exit $?
        fi
    fi

    exit 0
}

renderHelp()
{
    echo "Usage: maze storage client <[options]> [|storage] [|set|enable|disable|delete|status]
$*
    Options:
            -Q              quota in MB
            -P              password
            -l              do not add storage in fstab file
            -d              disable storage (don't mount)
            -h              show help

    Methods:
            [] default      Show storage infos

            [set]           set storage

                            Required Parameters:
                                -Q quota in MB
                                -P password
                                
                            Optional Parameters:
                                -l do not add storage in fstab file
                                -d disable storage (don't mount)

            [enable]        enable existing storage

                            Optional Parameters:
                                -l do not add storage in fstab file

            [disable]       disable existing storage

            [delete]        deletes existing storage

            [status]        displays node status
"
}

resizeStorage()
{
    if [ "$QUOTA" -gt "$STORAGE_SIZE" ]; then
        STORAGE_QUOTA_DIFF=`expr $QUOTA - $STORAGE_SIZE`
        if ! validateAvailableSpace "$STORAGE_QUOTA_DIFF"; then
            exit $?
        fi
    fi

    STORAGE_UNMOUNT=`unmountStorage`
    if [ "$?" != 0 ] ; then
        echo "$STORAGE_UNMOUNT"
        exit 111
    fi

    if ! e2fsck -fy "$STORAGE_FILE" 1> /dev/null; then
        echo "Device check on storage $STORAGE failed. Repairing necessary"
        exit 111
    fi

    echo "resizing storage from $STORAGE_SIZE MB to $QUOTA MB. This may take a while"
    if ! resize2fs -p $STORAGE_FILE ${QUOTA}M; then
        echo "Failed to resize storage $STORAGE"
        exit 111
    fi
}

setFstabLine()
{
    cat /etc/fstab | grep "$STORAGE_FILE $STORAGE_MOUNT_PATH" > /dev/null
    if [ "$?" != 0 ];then
        if ! backupFstab; then
            echo "Could not create backup of fstab"
            return 114
        fi

        echo "added storage $STORAGE in /etc/fstab"
        echo "$STORAGE_FSTAB_LINE" >> /etc/fstab
    fi
}

setStorage()
{
    initStorageVars "$STORAGE"
    if ! `id -u "$STORAGE" > /dev/null 2>1`; then
        createUser
    fi

    setUserPasswd

    if [ ! -f "$STORAGE_FILE" ]; then
        createStorage
    else
        STORAGE_SIZE=`ls -l --block-size=1M $STORAGE_FILE | awk '{print($5)}'`
        if [ "$?" != 0 -o -z "$STORAGE_SIZE" ]; then
            echo "Could not evaluate size of storage $STORAGE";
            exit 117
        fi
        if [ "$STORAGE_SIZE" != "$QUOTA" ]; then
            if ! resizeStorage ;then
                echo "Could not resize storage $STORAGE"
                exit 118
            fi
        fi
    fi

    if [ "$STORAGE_STATE" == "true" ]; then
        unmountStorage
    else
        mountStorage
    fi

    exit 0
}

setStorageHomePermissions()
{
    if ! `chmod 750 "$STORAGE_HOME"`; then
        echo "Could not set folder permission for $STORAGE_HOME"
        return 1
    fi
    if ! `chown root:$STORAGE_GROUP "$STORAGE_HOME"`; then
        echo "Could not set folder permission for $STORAGE_HOME"
        return 1
    fi
}

setStorageMountPermissions()
{
    if ! `chmod 750 "$STORAGE_MOUNT_PATH"`; then
        echo "Could not set folder permission for $STORAGE_MOUNT_PATH"
        return 1
    fi
    if ! `chown $STORAGE:$STORAGE_GROUP "$STORAGE_MOUNT_PATH"`; then
        echo "Could not set folder permission for $STORAGE_MOUNT_PATH"
        return 1
    fi
}

setUserPasswd()
{
    if [ "`cat /etc/shadow | grep "^$STORAGE:" | awk -F':' '{print $2}'`" != "$PASSWD" ];then
        echo "setting password..."
        if ! `sed -i -e "s|^$STORAGE:[a-zA-Z0-9$/.*]*:|$STORAGE:$PASSWD:|" /etc/shadow`; then
            echo "failed setting user password"
            exit 121
        fi
    fi
}

showStatus()
{
    initDiskSpaceVars

    STORAGES_COUNT=`ls $STORAGE_DEVICES_DIR | wc -l`

    echo "number of storages: $STORAGES_COUNT"
    echo "real storage space: $STORAGES_SIZE_REAL MB"
    echo "total storage space: $STORAGES_SIZE MB"
    echo "disk space left: $DISK_SPACE MB"
}

unmountStorage()
{
    if [ ! -f "$STORAGE_FILE" ]; then
        echo "storage $STORAGE does not exist"
        exit 112
    fi

    if ! unsetFstabLine; then
        exit $?
    fi

    mount | grep "$STORAGE_FILE on $STORAGE_MOUNT_PATH " > /dev/null
    if [ "$?" != 0 ]; then
        echo "storage $STORAGE is not mounted"
        exit 0
    fi

    echo "unmounting $STORAGE..."
    if ! `umount $STORAGE_MOUNT_PATH`; then
        echo "unmounting $STORAGE failed"
        exit 114
    fi

    exit 0
}

unsetFstabLine()
{
    cat /etc/fstab | grep "$STORAGE_FSTAB_LINE" > /dev/null
    if [ "$?" == 0 ];then
        echo "removing storage in /etc/fstab..."
        if ! backupFstab; then
            echo "Could not create backup of fstab"
            return 114
        fi

        LINE=`grep -rn -m1  "$STORAGE_FSTAB_LINE" /etc/fstab | cut -d : -f 1`
        if ! `sed -i "${LINE}d" /etc/fstab`;then
            echo "could not remove mount line of storage $STORAGE_NAME in fstab"
            return 114
        fi
    fi
}

#####
# @param int $1 additional required space
###
validateAvailableSpace()
{
    if [ -z "$1" ]; then
        return 1
    fi
    initDiskSpaceVars

    if [ "$1" -gt "$DISK_SPACE" ]; then
        echo "Not enough disk space ($DISK_SPACE MB for use left)"
        return 1
    fi

    return 0
}

#####
# @param int $1
###
validateInt()
{
    if [ -z "$1" ]; then
        return 1
    fi

    if echo "$1" | egrep -q -v '^[0-9]+$'; then
        return 1
    fi
}

#####
# @param int $1 quota 
###
validateQuota()
{
    if [ -z "$1" ]; then
        return 1
    fi

    if ! validateInt "$1"; then
        echo "given quota does not seem to be a integer"
        return $?
    fi

    if [ ! -z "$STORAGE_SIZE_MIN" ]; then
        if [ "$1" -lt "$STORAGE_SIZE_MIN" ]; then
            echo "quota ($1 MB) must be equal or greater than the minimal storage size of $STORAGE_SIZE_MIN MB"
            return 1
        fi
    fi
}

# parse options
while getopts "hdlQ:P:" opt; do
    case $opt in
        P)
            if [[ $OPTARG = -* ]]; then
                echo "Option -Q has a invalid argument"
                exit 1
            fi
            
            PASSWD="$OPTARG"
        ;;
        Q)
            if [[ $OPTARG = -* ]]; then
                echo "Option -Q has a invalid argument"
                exit 1
            fi
            initQuotaVars "$OPTARG"
        ;;
        d)
            STORAGE_STATE="true"
        ;;
        l)
            STORAGE_FSTAB="false"
        ;;
        h)
            renderHelp && exit 0
        ;;
        :)
            renderHelp && exit 100
        ;;
    esac
done

shift `expr $OPTIND - 1`
STORAGE=`echo "$1" | tr [:upper:] [:lower:]`
COMMAND="$2"

checkEnvironment

# parse actions
case $COMMAND in
    delete)
        if [ -n "$STORAGE" ]; then
            deleteStorage
        fi
    ;;
    enable)
        if [ -n "$STORAGE" ]; then
            initStorageVars "$STORAGE"
            mountStorage
        fi
    ;;
    status)
        showStatus
        exit
    ;;
    set)
        if [ -n "$STORAGE" -a -n "$QUOTA" -a -n "$PASSWD" ]; then
            setStorage
        fi
    ;;
    disable)
        if [ -n "$STORAGE" ]; then
            initStorageVars "$STORAGE"
            unmountStorage
        fi
    ;;
    *)
        if [ -z "$COMMAND" -a -n "$STORAGE" ]; then
            initStorageVars "$STORAGE"
            if [ ! -f "$STORAGE_FILE" ]; then
                echo "storage $STORAGE does not exist"
                exit 112
            fi

            getStorage "$STORAGE"
            exit 0
        elif [ -z "$COMMAND" ]; then
            getStorageList
            exit 0
        fi
    ;;
esac

renderHelp
exit 100